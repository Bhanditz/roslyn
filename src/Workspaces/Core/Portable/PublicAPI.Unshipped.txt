*REMOVED*abstract Microsoft.CodeAnalysis.Options.OptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey) -> object
*REMOVED*abstract Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey optionAndLanguage, object value) -> Microsoft.CodeAnalysis.Options.OptionSet
*REMOVED*Microsoft.CodeAnalysis.Options.IOption
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.DefaultValue.get -> object
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Feature.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage.get -> bool
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Name.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation>
*REMOVED*Microsoft.CodeAnalysis.Options.IOption.Type.get -> System.Type
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.DefaultValue.get -> T
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Feature.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Name.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Option(string feature, string name) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Option(string feature, string name, T defaultValue) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Option(string feature, string name, T defaultValue, params Microsoft.CodeAnalysis.Options.OptionStorageLocation[] storageLocations) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation>
*REMOVED*Microsoft.CodeAnalysis.Options.Option<T>.Type.get -> System.Type
*REMOVED*Microsoft.CodeAnalysis.Options.OptionKey
*REMOVED*Microsoft.CodeAnalysis.Options.OptionKey.Equals(Microsoft.CodeAnalysis.Options.OptionKey other) -> bool
*REMOVED*Microsoft.CodeAnalysis.Options.OptionKey.Language.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.OptionKey.Option.get -> Microsoft.CodeAnalysis.Options.IOption
*REMOVED*Microsoft.CodeAnalysis.Options.OptionKey.OptionKey(Microsoft.CodeAnalysis.Options.IOption option, string language = null) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option) -> T
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language) -> T
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet.OptionSet() -> void
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option, T value) -> Microsoft.CodeAnalysis.Options.OptionSet
*REMOVED*Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language, T value) -> Microsoft.CodeAnalysis.Options.OptionSet
*REMOVED*Microsoft.CodeAnalysis.Options.OptionStorageLocation
*REMOVED*Microsoft.CodeAnalysis.Options.OptionStorageLocation.OptionStorageLocation() -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.DefaultValue.get -> T
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Feature.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Name.get -> string
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.PerLanguageOption(string feature, string name, T defaultValue) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.PerLanguageOption(string feature, string name, T defaultValue, params Microsoft.CodeAnalysis.Options.OptionStorageLocation[] storageLocations) -> void
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation>
*REMOVED*Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.Type.get -> System.Type
*REMOVED*override Microsoft.CodeAnalysis.Options.Option<T>.ToString() -> string
*REMOVED*override Microsoft.CodeAnalysis.Options.OptionKey.Equals(object obj) -> bool
*REMOVED*override Microsoft.CodeAnalysis.Options.OptionKey.GetHashCode() -> int
*REMOVED*override Microsoft.CodeAnalysis.Options.PerLanguageOption<T>.ToString() -> string
*REMOVED*static Microsoft.CodeAnalysis.Options.Option<T>.implicit operator Microsoft.CodeAnalysis.Options.OptionKey(Microsoft.CodeAnalysis.Options.Option<T> option) -> Microsoft.CodeAnalysis.Options.OptionKey
*REMOVED*static Microsoft.CodeAnalysis.Options.OptionKey.operator !=(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right) -> bool
*REMOVED*static Microsoft.CodeAnalysis.Options.OptionKey.operator ==(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right) -> bool
abstract Microsoft.CodeAnalysis.Options.OptionSet.GetOption(Microsoft.CodeAnalysis.Options.OptionKey optionKey) -> object (forwarded, contained in Microsoft.CodeAnalysis)
abstract Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption(Microsoft.CodeAnalysis.Options.OptionKey optionAndLanguage, object value) -> Microsoft.CodeAnalysis.Options.OptionSet (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.DefaultValue { get; } -> object (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.DefaultValue.get -> object (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Feature { get; } -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Feature.get -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage { get; } -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.IsPerLanguage.get -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Name { get; } -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Name.get -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.StorageLocations { get; } -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.StorageLocations.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Options.OptionStorageLocation> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Type { get; } -> System.Type (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.IOption.Type.get -> System.Type (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.Option<> (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.Equals(Microsoft.CodeAnalysis.Options.OptionKey other) -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.Language { get; } -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.Language.get -> string (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.Option { get; } -> Microsoft.CodeAnalysis.Options.IOption (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.Option.get -> Microsoft.CodeAnalysis.Options.IOption (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionKey.OptionKey(Microsoft.CodeAnalysis.Options.IOption option, string language = null) -> void (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option) -> T (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet.GetOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language) -> T (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet.OptionSet() -> void (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.Option<T> option, T value) -> Microsoft.CodeAnalysis.Options.OptionSet (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionSet.WithChangedOption<T>(Microsoft.CodeAnalysis.Options.PerLanguageOption<T> option, string language, T value) -> Microsoft.CodeAnalysis.Options.OptionSet (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionStorageLocation (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.OptionStorageLocation.OptionStorageLocation() -> void (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Options.PerLanguageOption<> (forwarded, contained in Microsoft.CodeAnalysis)
override Microsoft.CodeAnalysis.Options.OptionKey.Equals(object obj) -> bool (forwarded, contained in Microsoft.CodeAnalysis)
override Microsoft.CodeAnalysis.Options.OptionKey.GetHashCode() -> int (forwarded, contained in Microsoft.CodeAnalysis)
static Microsoft.CodeAnalysis.Options.OptionKey.operator !=(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right) -> bool (forwarded, contained in Microsoft.CodeAnalysis)
static Microsoft.CodeAnalysis.Options.OptionKey.operator ==(Microsoft.CodeAnalysis.Options.OptionKey left, Microsoft.CodeAnalysis.Options.OptionKey right) -> bool (forwarded, contained in Microsoft.CodeAnalysis)
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.ITypeSymbol type, string name = null) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.ITypeSymbol> elementTypes, System.Collections.Generic.IEnumerable<string> elementNames = null) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> elements) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleTypeExpression(params Microsoft.CodeAnalysis.SyntaxNode[] elements) -> Microsoft.CodeAnalysis.SyntaxNode
Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessorDeclarations(Microsoft.CodeAnalysis.SyntaxNode declaration, params Microsoft.CodeAnalysis.SyntaxNode[] accessorDeclarations) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.GetAccessorDeclaration(Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.SetAccessorDeclaration(Microsoft.CodeAnalysis.Accessibility accessibility = Microsoft.CodeAnalysis.Accessibility.NotApplicable, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> statements = null) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleElementExpression(Microsoft.CodeAnalysis.SyntaxNode type, string name = null) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.TupleExpression(System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> arguments) -> Microsoft.CodeAnalysis.SyntaxNode
abstract Microsoft.CodeAnalysis.Editing.SyntaxGenerator.WithAccessorDeclarations(Microsoft.CodeAnalysis.SyntaxNode declaration, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.SyntaxNode> accessorDeclarations) -> Microsoft.CodeAnalysis.SyntaxNode
static Microsoft.CodeAnalysis.Editing.SyntaxEditorExtensions.InsertParameter(this Microsoft.CodeAnalysis.Editing.SyntaxEditor editor, Microsoft.CodeAnalysis.SyntaxNode declaration, int index, Microsoft.CodeAnalysis.SyntaxNode parameter) -> void
